[{"categories":null,"contents":"   mac homebrew常用配置     使用腾讯更新源  1 2  echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.cloud.tencent.com/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc      nodejs安装  1  brew install nodejs      参考   Homebrew-bottles 镜像使用帮助\n ","date":"Mar 02","permalink":"https://theseusf.github.io/posts/try/try_mac_homebrew/","tags":null,"title":"Try homebrew"},{"categories":null,"contents":"   强制深色模式设置   chrome访问chrome://flags/ 搜索dark 将Force Dark Mode for Web Contents设置为enabled   ","date":"Mar 02","permalink":"https://theseusf.github.io/posts/split/tip_chrome/","tags":null,"title":"强制chrome进入深色模式"},{"categories":null,"contents":"   ohmyzsh 安装p10k主题     1. 下载仓库  1  git clone --depth=1 git@github.com:romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k      2. 设置主题  1 2  $ vi ~/.zshrc ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34;      3. 重新加载配置生效  1  $ source ~/.zshrc      4. 加载完配置后默认会自动执行一次个性配置引导  1 2  # 手动执行引导 $ p10k configure      推荐字体安装     nerd   https://github.com/ryanoasis/nerd-fonts  1 2  git clone --depth=1 git@github.com:ryanoasis/nerd-fonts.git ./install      参考  powerlevel10k\n","date":"Feb 08","permalink":"https://theseusf.github.io/posts/try/try_p10k/","tags":null,"title":"ohmyzsh安装powerlevel10k主题"},{"categories":null,"contents":"   gitbook常用配置     安装gitbook     1. 安装nodejs  1 2 3 4 5  # for fedora sudo dnf install nodejs -y # for mac brew install nodejs      2. 安装gitbook-cli  1 2 3 4 5 6 7 8  # 使用淘宝更新源 sudo npm config set registry=http://registry.npm.taobao.org -g # 或者使用腾讯更新源 npm config set registry http://mirrors.cloud.tencent.com/npm # 安装 sudo npm install -g gitbook-cli      3. 查看gitbook版本并安装gitbook  1  gitbook -V      nodejs版本太新导致的问题  1 2 3 4 5 6 7 8 9 10  gitbook -V CLI version: 2.3.2 Installing GitBook 3.2.3 /usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287 if (cb) cb.apply(this, arguments) ^ TypeError: cb.apply is not a function at /usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287:18 at FSReqCallback.oncomplete (fs.js:184:5)      安装旧版本nodejs, 重新安装gitbook     1. 在已经安装nodejs的前提下, 安装n  1  sudo npm install -g n      2. 使用n安装10.24.1版本的nodejs  1  sudo n 10.24.1      3. 再次尝试安装gitbook  1 2  sudo npm config set registry=http://registry.npm.taobao.org -g gitbook -V      参考:   https://nodejs.org/en/download/releases/     gitbook使用     创建书籍  1 2  mkdir mybook \u0026amp;\u0026amp; cd mybook gitbook init      预览书籍  1 2  # 预览并构建 gitbook serve      构建书籍  1  gitbook build      书籍导出  1 2 3  gitbook pdf ./ ./mybook.pdf gitbook epub ./ ./mybook.epub gitbook mobi ./ ./mybook.mobi      通用配置  1 2 3 4 5 6 7 8 9  \u0026#34;title\u0026#34;: \u0026#34;book标题\u0026#34;, \u0026#34;author\u0026#34;:\u0026#34;book作者\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;book描述\u0026#34;, \u0026#34;language\u0026#34; : \u0026#34;zh-hans\u0026#34;, \u0026#34;links\u0026#34; : { \u0026#34;sidebar\u0026#34; : { \u0026#34;Home\u0026#34; : \u0026#34;https://www.侧边栏链接.com\u0026#34; } }      插件     代码区插件，显示行号和复制功能   根目录创建book.json 写入以下内容 执行gitbook install安装  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;code\u0026#34;] }      加-号禁用插件  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;-code\u0026#34;] }      回到顶部  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;back-to-top-button\u0026#34;] }      侧边导航栏宽度可调节插件  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;splitter\u0026#34;] }      支持emoji表情  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;advanced-emoji\u0026#34;] }      导航目录折叠，需要目录也有链接存在才能生效  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;chapter-fold\u0026#34;] }    参考：  1 2 3 4 5 6 7  # Summary  * [Introduction](README.md) * [chapter1](chapter1.md) * [sub chapter1](sub_chapter1.md) * [page1](page1.md) * [page1](page1.md)      另外一个目录折叠插件  1  { \u0026#34;plugins\u0026#34;:[\u0026#34;expandable-chapters-small\u0026#34;] }      高级搜索search-pro，需要禁用默认的search和lunr插件  1 2 3 4 5 6 7  { \u0026#34;plugins\u0026#34;: [ \u0026#34;-lunr\u0026#34;, \u0026#34;-search\u0026#34;, \u0026#34;search-pro\u0026#34; ] }      隐藏元素，比如Published with GitBook按钮  1 2 3 4 5 6 7 8 9 10  { \u0026#34;plugins\u0026#34;:[ \u0026#34;hide-element\u0026#34; ], \u0026#34;pluginsConfig\u0026#34;:{ \u0026#34;hide-element\u0026#34;:{ \u0026#34;elements\u0026#34;: [\u0026#34;.gitbook-link\u0026#34;] } } }      参考  GitBook插件整理\n","date":"Feb 08","permalink":"https://theseusf.github.io/posts/try/try_gitbook/","tags":null,"title":"Try gitbook"},{"categories":null,"contents":"   题目描述  给定一个长度为 n n\\ n 的数组，数组中的数为整数。 请你选择一个非空连续子数组，使该子数组所有数之和尽可能大。求这个最大值。\n   输入描述  第一行为一个正整数 n n\\ n ，代表数组的长度。 1≤n≤2∗1051\\leq n \\leq2*10^51≤n≤2∗105 第二行为 n n\\ n 个整数 aia_iai​，用空格隔开，代表数组中的每一个数。 ∣ai∣≤102|a_i| \\leq 10^2∣ai​∣≤102\n   输出描述  连续子数组的最大之和。\n   解题     1. 一般思路, 完全遍历所有字数组, 时间复杂度n^3  1 2 3 4 5 6 7 8 9 10 11 12 13  int maxSubArray(int* nums, int numsSize){ int maxSub = nums[0]; for(int i=0; i\u0026lt;numsSize; i++){ for(int j=i; j\u0026lt;numsSize; j++){ int sum = nums[i]; for(int k=i+1; k\u0026lt;=j; k++){ sum += nums[k]; } maxSub = maxSub\u0026lt;sum ? sum: maxSub; } } return maxSub; }      2. 动态规划, 时间复杂度n   f(i) 代表以第 i 个数结尾的连续子数组的最大和 f(i) = max{f(i-1) + nums[i], nums[i]} n个数可以简化为两个数, n1和n2, 若n1大于0, n1+n2是有可能更大的, 若n1小于0, 则肯定会更小, 所以需要从n2开始重新累加子数组的和 扩展到3个数, 当n1+n2\u0026gt;0, 但n1+n2+n3\u0026lt;0, 对于n3之前的子数组[n1, n2], 如果n1\u0026lt;0, 则一开始就被丢弃了, maxSum已经记录n1, n1+n2, 且max(n1, n1+n2)\u0026gt;n2, 也就不用单独回头遍历计算子数组[n2]了, 这里n1, n2可以扩展为任意长度连续子数组  1 2 3 4 5 6 7 8 9  int maxSubArray(int* nums, int numsSize){ int sum = nums[0]; int max = nums[0]; for(int i=1; i\u0026lt;numsSize; i++) { sum = sum\u0026gt;0 ? sum+nums[i] : nums[i]; max = max\u0026lt;sum ? sum: max; } return max; }      3. 分治法  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #define MAX(a,b) ((a)\u0026gt;(b)?a:b)  typedef struct Status{ int lmax; // 左端点为起点的最大子数组和  int rmax; // 右端点为终点的最大子数组和  int max; // 最大子数组和  int sum; // 当前数组和 }status; status maxSub(int* nums, int begin, int end){ if(begin==end) { return (status){nums[begin], nums[begin], nums[begin], nums[begin]}; } int mid = (begin+end)/2; status larr = maxSub(nums, begin, mid); status rarr = maxSub(nums, mid+1, end); status marr; marr.lmax = MAX(larr.lmax, larr.sum+rarr.lmax); marr.rmax = MAX(rarr.rmax, rarr.sum+larr.rmax); marr.sum = larr.sum + rarr.sum; marr.max = MAX(MAX(larr.max, rarr.max), larr.rmax+rarr.lmax); return marr; } int maxSubArray(int* nums, int numsSize){ return maxSub(nums, 0, numsSize-1).max; }   ","date":"Feb 08","permalink":"https://theseusf.github.io/posts/code/max_sub_arr/","tags":null,"title":"连续子数组最大和"},{"categories":["try"],"contents":"   Install  1 2 3 4 5 6 7 8 9  # MacOS brew install hugo # Fedora dnf install hugo # 查看版本 $ hugo version Hugo Static Site Generator v0.80.0/extended linux/amd64 BuildDate: unknown      latest release   https://github.com/gohugoio/hugo/releases  wget https://github.com/gohugoio/hugo/releases/download/v0.93.2/hugo_extended_0.93.2_macOS-64bit.tar.gz wget https://github.com/gohugoio/hugo/releases/download/v0.93.2/hugo_extended_0.93.2_Linux-64bit.tar.gz # 解压 tar -zxvf hugo_extended_0.93.2_macOS-64bit.tar.gz tar -zxvf hugo_extended_0.93.2_Linux-64bit.tar.gz    Build from source  1 2 3 4 5 6 7 8 9 10 11  git clone git@github.com:gohugoio/hugo.git mkdir -p src/github.com/gohugoio ln -sf $(pwd) src/github.com/gohugoio/hugo go get go build -o hugo main.go CGO_ENABLED=1 go install -v --tags extended # You can run go clean -modcache and then go mod tidy which will re-download all deps with the correct checksum (this updates the pkg cache in $GOPATH/pkg/mod/). # To update vendor/ folder run: go mod vendor      build error  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ CGO_ENABLED=1 go install -v --tags extended go: downloading github.com/dlclark/regexp2 v1.4.0 go: downloading golang.org/x/sys v0.0.0-20220209214540-3681064d5158 go: downloading github.com/pelletier/go-toml/v2 v2.0.0-beta.6 go: downloading github.com/aws/aws-sdk-go v1.43.5 get \u0026#34;golang.org/x/sys\u0026#34;: found meta tag vcs.metaImport{Prefix:\u0026#34;golang.org/x/sys\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/sys\u0026#34;} at //golang.org/x/sys?go-get=1 verifying github.com/pelletier/go-toml/v2@v2.0.0-beta.6: checksum mismatch downloaded: h1:TA3qh4Cq1VOjh4AJnMHrUFbAsIbD7OnOvpaIRYsU0sI= go.sum: h1:JFNqj2afbbhCqTiyN16D7Tudc/aaDzE2FBDk+VlBQnE= SECURITY ERROR This download does NOT match an earlier download recorded in go.sum. The bits may have been replaced on the origin server, or an attacker may have intercepted the download attempt. For more information, see \u0026#39;go help module-auth\u0026#39;.    fix: 手动修改downloaded中的checksum到go.sum\n    Theme  1 2 3 4 5 6  # try hogo-book theme git submodule add git@github.com:alex-shpak/hugo-book themes/hugo-book cp -R themes/hugo-book/exampleSite/content . # run with -D draft enabled, --theme theme specified, -p port specified hugo server --minify -D --theme hugo-book -p 1314      new site  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # init a new site hugo new site myblog # add a theme git submodule add git@github.com:WingLim/hugo-tania themes/hugo-tania # update the theme to config.toml theme = \u0026#34;paper\u0026#34; # run hugo server --minify -D # first page hugo new posts/my-first-post.md # about page hugo new about.md      katex  1  Inline math: $\\varphi=\\dfrac{1+\\sqrt5}{2}=1.6180339887… $   Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\n1 2 3  Block math: $$\\varphi=1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$   Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"Jan 12","permalink":"https://theseusf.github.io/posts/try/try_hugo/","tags":["hugo"],"title":"Try hugo"},{"categories":null,"contents":"   下载仓库  1  git clone git@github.com:.../blog.git      配置默认编辑器为vim  1 2 3 4 5 6 7  git config --global core.editor vim # --edit 编辑配置 git config -e # 编辑全局配置 git config --global -e      配置保存帐号密码  1  git config --global credential.helper store      显示当前仓库改动状态  1  git status      改动完成后暂存文件（暂存了才能commit，命令行操作注意路径，git status会显示路径）  1  git add README.md      一个一个add嫌麻烦，可以一次性全add进去  1 2 3 4 5 6 7 8  # add modified \u0026amp; new file git add . # --update 仅add更新的文件，不会add新文件（untracked files） git add -u # add all changes, modified + untracked + deleted git add -A      全add可能会添加到不想加的文件，可以使用.gitignore文件来排除，然后在.gitignore文件中添加排除项  1  touch .gitignore      命令行下其实有交互式的add操作  1  git add -i      add的其它替代方案   使用vscode，全程可视化操作，全平台都有安装包     提交代码（这么敲会进入vim编辑界面，编辑好退出就可以了）  1  git commit      提交代码2（-m参数带上了日志信息，直接就提交了）  1  git commit -m \u0026#34;一些日志...\u0026#34;      更新代码  1  git pull --rebase      上传代码（注意上传前要先更新）  1 2 3 4 5  # 向默认关联的远程分支推送 git push # 向指定远程分支推送 git push -u origin/master      检出其它分支  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  git checkout -b new_local_branch_name origin/remote_branch_name # 查看本地分支 local branch git branch # 查看本地远程分支 remote-tracking branch git branch -r # 查看本地所有分支 local branch \u0026amp; remote-tracking branch git branch -a # 重命名本地分支 git branch -m oldname newname # 删除本地分支 git branch -d local_branch_name # 强制删除本地分支 git branch -D local_branch_name # 查看本地分支upstream git branch -vv # 设置push/pull默认关联分支 --set-upstream-to git branch -u origin/master      查看日志  1 2 3 4 5 6 7 8 9 10 11  # 显示日志 git log # 最近2个日志 git log -2 # 全部修改 git log -p # 日志统计 git log --stat --summary      设置别名  1 2 3 4 5  # git log -\u0026gt; git lg git config --global alias.lg \u0026#34;log --graph --abbrev-commit --decorate --format=format:\u0026#39;%C(bold blue)%h%C(reset) %C(bold green)%as%C(reset) %C(white)%s%C(reset) %C(dim white)%an\u0026lt;%ae\u0026gt;%C(reset)%C(bold yellow)%d%C(reset)\u0026#39; --all\u0026#34; # git status -\u0026gt; git st git config --global alias.st status      remote远程地址  1 2 3 4 5 6 7 8  # 查看所有远程地址 git remote -v # 修改远程地址 git remote set-url origin git@github.com:.../blog.git # 重命名 git remote rename origin origin2      删除未被托管的新增文件  1 2  # -d 清理untracked目录和文件，-f 强制清理 git clean -df      垃圾回收  1  git gc      git branch像less一样显示问题  1  git config --global paper.branch false      子模块submodule  # 添加子模块到指定目录 git submodule add git@github.com:alex-shpak/hugo-book themes/hugo-book # 初始化，更新 git submodule update --init --recursive # 更新所有子模块 git submodule foreach git pull    参考   git add git log  ","date":"May 23","permalink":"https://theseusf.github.io/posts/try/try_git/","tags":"git","title":"Try git"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://theseusf.github.io/articles/","tags":null,"title":"Articles"}]